<?php

namespace App\Tests\Unit;

use Library\Http\Request\RequestDataModel;
use Library\Http\Request\ResolvedRequest;
use Library\Infrastructure\Helper\SerializerWrapper;
use Library\Validation\SymfonyValidatorFacade;
use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;

class ResolvedRequestTest extends WebTestCase
{
    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        static::createClient();
    }

    public function test_valid_resolved_request()
    {
        $validRequest = [
            'internal_type' => 'view',
            'name' => 'name',
            'data' => [
                'some_data' => [],
            ],
            'method' => 'get',
        ];

        /** @var SymfonyValidatorFacade $symfonyValidator */
        $symfonyValidator = static::$container->get('library.facade.symfony_validator');
        /** @var RequestDataModel $requestDataModel */
        $requestDataModel = static::$container
            ->get(SerializerWrapper::class)
            ->getDeserializer()
            ->create($validRequest, RequestDataModel::class);

        $resolvedRequest = new ResolvedRequest(
            $requestDataModel,
            $symfonyValidator
        );

        static::assertEquals($validRequest['method'], $resolvedRequest->getMethod());
        static::assertEquals($validRequest['name'], $resolvedRequest->getName());
        static::assertEquals($validRequest['internal_type'], $resolvedRequest->getInternalType());
    }

    public function test_invalid_resolved_request()
    {
        $validRequest = [
            'internal_type' => 'view',
            'name' => 'name',
            'data' => [
                'some_data' => [],
            ],
            'method' => 'get',
        ];

        $requestKeys = array_keys($validRequest);

        /** @var SymfonyValidatorFacade $symfonyValidator */
        $symfonyValidator = static::$container->get('library.facade.symfony_validator');

        foreach ($requestKeys as $key) {
            $entersException = false;

            $previousValue = $validRequest[$key];
            $validRequest[$key] = '';

            try {
                /** @var RequestDataModel $requestDataModel */
                $requestDataModel = static::$container
                    ->get(SerializerWrapper::class)
                    ->getDeserializer()
                    ->create($validRequest, RequestDataModel::class);

                new ResolvedRequest(
                    $requestDataModel,
                    $symfonyValidator
                );

            } catch (\RuntimeException $e) {
                $entersException = true;

                $validRequest[$key] = $previousValue;
            }

            static::assertTrue($entersException);
        }
    }
}